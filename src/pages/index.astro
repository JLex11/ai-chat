---
import Card from '../components/Card.astro'
import Layout from '../layouts/Layout.astro'
---

<Layout title='AI Chat - An AI chat without external APIs'>
  <main class='h-dvh p-4'>
    <header class='flex flex-col items-center justify-center h-1/6'>
      <h1
        class='text-4xl font-bold bg-gradient-to-r from-red-600 via-violet-900 to-indigo-500 text-transparent bg-clip-text'
      >
        AI Chat
      </h1>
      <p class='text-base opacity-[0.7]'>Chat con IA que corre en local</p>
    </header>
    <Card>
      <ul
        id='messages'
        class='h-max overflow-auto scrollbar scrollbar-thumb-slate-700 scrollbar-thumb-rounded-full scrollbar-track-rounded-full scrollbar-w-[10px] gap-2 scroll-smooth'
      >
        <li
          class='p-2 border border-slate-600 border-none'
          data-message-type='bot'
        >
          <span
            class='group-data-[message-type=user]:text-red-500 text-blue-500 font-bold'
            >GPT</span
          >
          <p class='text-slate-400 text-base'>
            Hola, soy un asistente de IA que puede responder preguntas y
            proporcionar información sobre una amplia variedad de temas. ¿En qué
            puedo ayudarte hoy?
          </p>
        </li>
      </ul>
      <form
        action=''
        data-model-status=''
        class='h-14 w-full p-2 border border-slate-600 rounded-md flex justify-between items-center gap-2 relative text-lg'
      >
        <input
          placeholder='Escribe aquí tu mensaje'
          class='w-full bg-transparent select-none focus:outline-none'
        />
        <button
          type='submit'
          disabled
          class='bg-slate-600 bg-opacity-[0.6] text-white p-1 rounded-md px-2 disabled:opacity-50 transition-opacity'
        >
          Enviar
        </button>
      </form>

      <template id='message-template'>
        <li
          class='p-2 border border-slate-600 border-none group'
          data-message-type=''
        >
          <span
            class='group-data-[message-type=user]:text-red-500 text-blue-500 font-bold'
          ></span>
          <p class='text-slate-400 text-base'>
            <div></div>
          </p>
        </li>
      </template>
    </Card>
  </main>
</Layout>

<style>
  main {
    margin: 0 auto;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
  }

  form::after {
    content: attr(data-model-status);
    position: absolute;
    top: -2.5rem;
    right: 0;
    color: white;
    opacity: 0.5;
    font-size: 0.8rem;
  }
</style>

<script>
  import { CreateWebWorkerMLCEngine } from '@mlc-ai/web-llm'

  const msgType = { user: 'Tú', bot: 'GPT' } as const
  const $ = (e: string) => document.querySelector(e)

  const $messages = $('#messages')! as HTMLUListElement
  const $form = $('form')! as HTMLFormElement
  const $input = $form!.querySelector('input')! as HTMLInputElement
  const $sendButton = $form!.querySelector('button')! as HTMLButtonElement
  const $template = $('#message-template')! as HTMLTemplateElement

  // const SELECTED_MODEL = "Llama-3-8B-Instruct-q4f16_1-MLC-1k";
  const SELECTED_MODEL = 'gemma-2b-it-q4f32_1-MLC'
  const messages = [] as { role: 'user' | 'assistant'; content: string }[]

  const engine = await CreateWebWorkerMLCEngine(
    new Worker(new URL('../scripts/worker.ts', import.meta.url), {
      type: 'module',
    }),
    SELECTED_MODEL,
    {
      initProgressCallback: info => {
        $form.dataset.modelStatus = info.text
        if (info.progress === 1) $sendButton.removeAttribute('disabled')
      },
    },
  )
  $form.dataset.modelStatus = ''

  $form.addEventListener('submit', async e => {
    e.preventDefault()
    const messageText = $input.value.trim()
    if (!messageText) return
    $form.reset()

    addMessage(messageText, 'user')
    $sendButton.setAttribute('disabled', 'true')
    $sendButton.textContent = 'Respondiendo...'

    messages.push({ role: 'user', content: messageText })

    const replyChunks = await engine.chat.completions.create({
      messages: messages,
      stream: true,
    })

    let replyText = ''
    const $messageText = addMessage('', 'bot')

    for await (const chunk of replyChunks) {
      replyText += chunk.choices[0]?.delta?.content ?? ''
      $messageText.textContent = replyText
      $messages.scrollTop = $messages.scrollHeight
    }

    messages.push({ role: 'assistant', content: replyText })
    $sendButton.removeAttribute('disabled')
    $sendButton.textContent = 'Enviar'
  })

  function addMessage(messageText: string, sender: keyof typeof msgType) {
    const $clonedTemplate = $template.content.cloneNode(
      true,
    ) as HTMLTemplateElement
    const $message = $clonedTemplate.firstElementChild as HTMLLIElement

    $message.dataset.messageType = sender
    $message.querySelector('span')!.textContent = msgType[sender]
    $message.querySelector('div')!.textContent = messageText

    $messages.appendChild($message)
    $messages.scrollTop = $messages.scrollHeight

    return $message.querySelector('div')!
  }
</script>
